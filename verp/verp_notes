
Versioning for SLAs
 - only for data -- i.e., size/structure can't change

Each vptr maintains a (version -> ptr mapping); we use this mapping to
determine the version:

#### Alg.1:
    vptr.get(ver):
	for (v = ver; ; v = v->parent) {
		if ((ptr = mapping.get(v)) != NULL) {
			break;
		}
	}
	return ptr;

The user defines a base version. This can be used to aid GC

#### Alg.2:
    vptr.get(ver):
	for (v = ver; ; v = v->parent) {
		if ((ptr = mapping.get(v)) != NULL) {
			break;
		}

		if (v == base) {
			gc = 1;
		}
	}
	if (gc == 1) {
		mapping.reset() // should decrease reference counts of all versions and call ptr_dealloc() on objects
		mapping.set(base, ptr)
	}
	return ptr;


Versions are referenced:
 by ->parent pointers
 by mv objects
 by version to ptr mappings in fat nodes
   |
   |-----> These make GC difficult. Can be replaced with v_refs?
   NO (or to rephrase NOT EASILY):
   because we need to guarantee that we can always find a mapping for all
   vptrs. So, for example, we might end up with only invalid versions on a vptr
   map. Also, we might end up with versions that are all "older" than the base
   and then we don't have a way of knowing the "correct" mapping.


- Ephemeral versions?

  floorplan will branch a number of versions, make changes and then keep only one.
  We don't need the discarded versions, but for each pointer the version will remain
  in the hash table until  the base pointer surprsases all versions of this pointer

   - A mapping from versions to pointers, would help removing the mappings
   - We might consider ephemeral versions, where the changes are kept externally
     and then commited by actually inserting q


 Vers can have a (constant) buffer of vpts where mappings are holded
